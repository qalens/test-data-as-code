import {createAsyncThunk, createSlice, PayloadAction} from "@reduxjs/toolkit";
import {addTag, AddTagItem, refreshItems} from "./tagAPI";
import {RootState} from "../../app/store";

export interface TagItem{
    id:number,
    name:string
}
export interface TagState {
    items: TagItem[];
    status: 'idle' | 'loading' | 'failed';
    newItem: null | TagItem
}

const initialState: TagState = {
    items: [],
    status: 'idle',
    newItem:null,
};
export const refreshAsync = createAsyncThunk(
    'tag/refresh',
    async (items?: TagItem[]) => {
        const response = await refreshItems(items);
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);
export const addAsync = createAsyncThunk(
    'tag/add',
    async (name: string) => {
        const newItem = await addTag(name);
        const allItems =  await refreshItems();
        return {newItem,allItems};
    }
);
export const tagSlice = createSlice({
    name: 'tag',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        refresh: (state, action: PayloadAction<TagItem[]>) => {
            state.items = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(refreshAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(refreshAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.items = action.payload;
            })
            .addCase(addAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(addAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.items = action.payload.allItems
                state.newItem = action.payload.newItem
            })
    },
});
export const selectTags = (state: RootState) => state.tag.items;
export const selectNewTag = (state: RootState) => state.tag.newItem;
export default tagSlice.reducer;